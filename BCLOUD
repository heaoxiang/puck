#edit-mode: -*- python -*-
#coding:gbk

WORKROOT('../../../')

#platform, if not write PLATFORM('xxx') in BCLOUD file, default is 'redhat4u3'
#PLATFORM('centos4u3')

#gcc version, default 'gcc'
COMPILER('gcc82')
if GLOBAL_GCC_VERSION() == 'gcc82':
    CPPFLAGS('-Wno-error=sizeof-pointer-div')
    CPPFLAGS('-Wno-error=cast-function-type')
    CPPFLAGS('-Wno-error=stringop-truncation')
    CPPFLAGS('-Wno-error=unused-parameter')
    CPPFLAGS('-Wno-cast-function-type')
    CPPFLAGS('-Wno-error=sign-compare')


CPPFLAGS('-std=c++11 -Wall -fopenmp  -msse4 -Wcast-align -Ofast -lm -lrt -pthread  -DHAVE_CXX0X -march=native -Wl,--no-as-needed -fpic -g -DFINTEGER=int')

#CONFIGS('baidu/third-party/yael@yael_v438@git_branch')
CONFIGS('baidu/third-party/mkl@mkl_2019-3-199-1_PD_BL@git_tag')
#CONFIGS('baidu/base/common@stable')
#CONFIGS('third-64/gflags@gflags_2-0-0-100_PD_BL')
#CONFIGS('third-64/boost@boost_1-56-0-100_PD_BL', Libraries(''))
CONFIGS('baidu/third-party/swig@master@git_branch')
CONFIGS("baidu/third-party/cpython@cpython_3.6_3-6-0-0_GEN_PD_BL@git_tag")
CONFIGS('baidu/third-party/glog@0.6.0@git_branch')
CONFIGS("baidu/third-party/gtest@gtest_1-7-2-0_PD_BL@git_tag")
#link flags
LDFLAGS('-lpthread -pthread -lcrypto -lrt -ldl -fopenmp -lz')

#-I path
INCPATHS('. ')

INCPATHS('$OUT_ROOT/baidu/third-party/cpython/output/include/python3.6m/ ')

GenSources('./swig_run.sh', ' ', './pyapi_wrapper/py_puck_api.i ./pyapi_wrapper/numpy.i ./swig_run.sh ../../../baidu/third-party/swig')

user_sources=GLOB(' ./puck/*.cpp ./puck/base/*.cpp ./puck/base/yael/*.c ./puck/gflags/*.cpp ./puck/hierarchical_cluster/*.cpp puck/tinker/*.cpp puck/tinker/method/*.cc puck/puck/*.cpp ')

#release headers  move result to output
HEADERS('puck/*.h', '$INC/puck/')
HEADERS('puck/base/*.h ', '$INC/puck/base')
HEADERS('puck/base/yael/*.h ', '$INC/puck/base/yael')
HEADERS('puck/tinker/*.h ', '$INC/puck/tinker')
HEADERS('puck/gflags/*.h ', '$INC/puck/gflags')
HEADERS('puck/tinker/space/*.h ', '$INC/puck/tinker/space')
HEADERS('puck/tinker/method/*.h ', '$INC/puck/tinker/method')
HEADERS('puck/puck/*.h ', '$INC/puck/puck')
HEADERS('puck/hierarchical_cluster/*.h ', '$INC/puck/hierarchical_cluster')
HEADERS('tools/*.h ', '$INC/puck/tools')
OUTPUT('ann-benchmarks', '$OUT')

#release files except headers
OUTPUT(GLOB_GEN_SRCS("py_puck_api/py_puck_api.py"), "$OUT/lib")

#.a
StaticLibrary('puck', Sources(user_sources, UseUbrpcgen(False)))

#py. so
py_lib_sources=user_sources
py_lib_sources+= ' pyapi_wrapper/py_api_wrapper.cpp '
SharedLibrary('_py_puck_api', LinkDeps(True), Sources(py_lib_sources + GLOB_GEN_SRCS(' py_puck_api/py_puck_api.cpp ')))


Directory("tools")
Directory("demo")
Directory("test")
